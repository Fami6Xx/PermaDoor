// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL") // uses connection pooling
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     String          @id @default(cuid())
  discordId              String
  name                   String
  global_name            String
  two_factor_enabled     Boolean
  email                  String?         @unique
  verified               Boolean?
  emailVerified          Boolean?
  image                  String
  accounts               Account[]
  sessions               Session[]
  messages               Message[]
  conversations          Conversation[]
  sentFriendRequests     FriendRequest[] @relation("FriendRequestSender")
  receivedFriendRequests FriendRequest[] @relation("FriendRequestReceiver")
  friendships            Friendship[]    @relation("Friendships") // Friends the user has added
  friendOf               Friendship[]    @relation("FriendOf") // Users who have added this user as a friend
}

model Friendship {
  id        String   @id @default(cuid())
  userId    String
  friendId  String
  createdAt DateTime @default(now())

  user   User @relation("Friendships", fields: [userId], references: [id], onDelete: Cascade)
  friend User @relation("FriendOf", fields: [friendId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
}

model FriendRequest {
  id         String @id @default(cuid())
  senderId   String
  receiverId String

  sender   User @relation("FriendRequestSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("FriendRequestReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
}

model Conversation {
  id        String    @id @default(cuid())
  name      String    @default("Conversation")
  encrypted Boolean   @default(false)
  users     User[]
  messages  Message[]
}

model Message {
  id             String   @id @default(cuid())
  authorId       String
  conversationId String
  message        String
  postedAt       DateTime @default(now())

  author       User         @relation(fields: [authorId], references: [id])
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}
